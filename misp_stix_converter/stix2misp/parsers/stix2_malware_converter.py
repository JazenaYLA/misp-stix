#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from ... import Mapping
from ..exceptions import UnknownParsingFunctionError
from .stix2mapping import (
    ExternalSTIX2Mapping, InternalSTIX2Mapping, STIX2Mapping)
from .stix2converter import ExternalConverter, InternalConverter, STIX2Converter
from abc import ABCMeta
from pymisp import MISPGalaxyCluster
from stix2.v20.sdo import Malware as Malware_v20
from stix2.v21.sdo import Malware as Malware_v21
from typing import Optional, Union

_MAIN_PARSER_TYPING = Union[
    'ExternalSTIX2toMISPParser', 'InternalSTIX2toMISPParser'
]
_MALWARE_TYPING = Union[
    Malware_v20, Malware_v21
]


class MalwareMapping(STIX2Mapping):
    pass


class MalwareConverter(STIX2Converter, metaclass=ABCMeta):
    def __init__(self, main: _MAIN_PARSER_TYPING):
        self._set_main_parser(main)
    
    def _create_cluster(self, malware: _MALWARE_TYPING,
                        description: Optional[str] = None,
                        galaxy_type: Optional[str] = None) -> MISPGalaxyCluster:
        malware_args = self._create_cluster_args(
            malware, galaxy_type, description=description
        )
        meta = self._handle_meta_fields(malware)
        if hasattr(malware, 'external_references'):
            meta.update(
                self._handle_external_references(malware.external_references)
            )
        if hasattr(malware, 'kill_chain_phases'):
            meta['kill_chain'] = self._handle_kill_chain_phases(
                malware.kill_chain_phases
            )
        if hasattr(malware, 'labels'):
            self._handle_labels(meta, malware.labels)
        if meta:
            malware_args['meta'] = meta
        return self._create_misp_galaxy_cluster(malware_args)

    def _parse_malware_object(self, malware: _MALWARE_TYPING):
        misp_object = self._create_misp_object('malware', malware)
        return misp_object


class ExternalMalwareMapping(MalwareMapping, ExternalSTIX2Mapping):
    pass


class ExternalMalwareConverter(MalwareConverter, ExternalConverter):
    def __init__(self, main: 'ExternalSTIX2toMISPParser'):
        super().__init__(main)
        self._mapping = ExternalMalwareMapping

    def parse(self, malware_ref: str):
        malware = self.main_parser._get_stix_object(malware_ref)
        if hasattr(malware, 'sample_refs'):
            if malware.is_family:
                self._parse_malware_object_and_galaxy(malware)
            else:
                self._parse_malware_object(malware)
        if getattr(malware, 'is_family', True) and hasattr(malware, 'name'):
            self._parse_malware_object(malware)
        else:
            self._parse_galaxy(malware)


class InternalMalwareMapping(MalwareMapping, InternalSTIX2Mapping):
    pass


class InternalMalwareConverter(MalwareConverter, InternalConverter):
    def __init__(self, main: 'InternalSTIX2toMISPParser'):
        super().__init__(main)
        self._mapping = InternalMalwareMapping

    def parse(self, malware_ref: str):
        malware = self.main_parser._get_stix_object(malware_ref)
        feature = self._handle_object_mapping(malware.labels, malware.id)
        try:
            parser = getattr(self, feature)
        except AttributeError:
            raise UnknownParsingFunctionError(feature)
        try:
            parser(malware)
        except Exception as exception:
            self.main_parser._attack_pattern_error(malware.id, exception)